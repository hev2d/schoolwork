import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

public class Binomial_expansion {
	
		public static void main(String[] args){
			Scanner scanner = new Scanner(System.in);
			Scanner input=new Scanner(System.in);
			String answer= null;
			do{
			output ("do you want (p)ascals triangle or a (b)inomial expansion?");
			
			char selection =scanner.next().charAt(0);
			if(selection== 'p'){
				int rows = inputInt("Enter the number of rows that you would like to display of Pascals triangle");
				pascals(rows);
			} else{
				output ("(a+b)^n");
				int n=inputInt("Input the n");
				int a=inputInt("input the a");
				int b=inputInt("Input the b");
				BinomialExpansion(n,a,b);
				}
		
		output("would you like to try another?");
		 answer = input.nextLine();
			}while(answer.toLowerCase().equals( "y" ));
			
			
		}
			static int factorial (int x) {
				if (x <=1){
						return 1;
				}
				else{
					return x*(factorial(x-1));
				}

			}
			static int BinomialTheroem (int n, int k){
				int numerator= factorial(n);
				int denomenator= factorial(k)*factorial(n-k);
				return numerator/denomenator;
			}
			static int BinomialExpansion (int n, int a, int b){
				output ("In binomial, n = " + n + " a = " + a + " and b = " + b);
				int k = 0;
				for(int x=0; x<n+1;x++){
					int coefficient= BinomialTheroem(n,k);
					int exponentfora=n-k;
					int exponentforb=k;
				
					output(coefficient+"("+Power(b,exponentforb)+"b"+"^"+exponentforb+")"+"("+Power(a,exponentfora)+"a"+"^"+exponentfora+")");
					k++;
				}
				return 1;
			}

			static int pascals (int rows){
			     try
			       {
			         
			         
			         for(int i=0;i<rows;i++)
			            {
			               int num=1;
			               System.out.format("%"+(rows-i)*2+"s"," ");
			               for(int j=0;j<=i;j++)
			                 {
			                   System.out.format("%4d",num);
			                   num=num*(i-j)/(j+1);
			                 }
			             System.out.println();
			            }
			        }
			        catch(Exception e)
			            {
			              System.out.println(""+e);
			            }
			     return 1;
			}
			static int Power(int power, int exponent){
			      int number=1;
			      
			      for (int x=0;x<exponent;x++){ 
			           number*=power;
			        }
			        output (number);
			        return number;
			        
			    }
			static void output (String info){
				   System.out.println(info);
				}
			static void output (char info){
				   System.out.println(info);
				}
			static void output (int info){
				   System.out.println(info);
				}
			static void output (double info){

				   System.out.println(info);

				}
			static char inputChar(String prompt){
				   char result = (char)0;
				   try{
				       result = input (prompt).charAt(0);
				   }
				   catch (Exception e){
				       result = 0;
				   }
				   return result;
				}
			static String input (String prompt){
				   String iput = null;
				   System.out.print(prompt + ": ");
				   try{
				       BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
				       iput = is.readLine();
				       if (iput.length() == 0) return null;
				   }
				   catch (IOException e){
				       System.out.println("IO Exception: " + e);
				   }
				   return iput.toLowerCase();
				}
			static double inputDouble(String prompt){
				   double result = 0;
				   try{
				       result=Double.parseDouble (input(prompt));
				   }
				   catch (Exception e){
				       result = 0;
				   }
				   return result;
				}
			static int inputInt(String prompt){
				   int result = 0;
				   try{
				       result = Integer.parseInt(input(prompt));
				   }
				   catch (Exception e){
				       result = 0;
				   }
				   return result;
				}
		}
